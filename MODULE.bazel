module(
    name = "dv",
)

# =============================================================================
# Rust Setup
# =============================================================================
bazel_dep(name = "rules_rust", version = "0.63.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2024")
use_repo(rust, "rust_toolchains")

# ==============================================================================
# Python Setup
# ==============================================================================
bazel_dep(name = "rules_python", version = "0.40.0")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//:tools/requirements.txt",
)
use_repo(pip, "pypi")

# ==============================================================================
# JavaScript / Node.js Setup
# ==============================================================================
bazel_dep(name = "aspect_rules_js", version = "2.5.0")

# Node.js version
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.3.0")
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "20.13.1")

# Set up npm and pnpm package managers
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//docs:pnpm-lock.yaml",
)
use_repo(npm, "npm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir $PWD install
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
use_repo(pnpm, "pnpm")
