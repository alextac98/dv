name: Rust Build

on:
  pull_request:
    paths:
      - 'core/**'
  push:
    branches: [ main ]
    paths:
      - 'core/**'
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

jobs:
  version-check:
    name: Version Check
    runs-on: ubuntu-latest
    env:
      CI: true
      BAZELISK_ALLOW_ENVS: Y
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Version Check
        run: bazel run //:update_versions -- --dryrun --rust

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: version-check
    env:
      CI: true
      BAZELISK_ALLOW_ENVS: Y
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: ~/.cache/bazel
          key: bazel-${{ runner.os }}-${{ hashFiles('.bazelversion', 'MODULE.bazel', 'MODULE.bazel.lock') }}
          restore-keys: |
            bazel-${{ runner.os }}-

      - name: Build core library & docs targets
        run: bazel build //core:all --keep_going

  core-test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      CI: true
      BAZELISK_ALLOW_ENVS: Y
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: ~/.cache/bazel
          key: bazel-${{ runner.os }}-${{ hashFiles('.bazelversion', 'MODULE.bazel', 'MODULE.bazel.lock') }}
          restore-keys: |
            bazel-${{ runner.os }}-

      - name: Test Core
        run: |
          bazel test //core/... --test_output=errors --keep_going

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build, core-test, version-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: 
      name: Production
    env:
      CI: true
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Publish Rust crate
        run: |
          cd core && cargo publish --token $CARGO_REGISTRY_TOKEN
