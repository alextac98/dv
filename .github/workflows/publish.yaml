name: publish

on:
  workflow_call:
    secrets:
      CARGO_REGISTRY_TOKEN:
        required: true

concurrency:
  group: publish-${{ github.ref_name }}
  cancel-in-progress: false

permissions:
  contents: write # required to push tags

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: prepare-release
    # Extra guard to ensure we only publish from main when called
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.tag_check.outputs.should_publish }}
    steps:
      - name: Checkout repository at triggering commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0 # we need tags and history

      - name: Extract version from VERSION.toml
        id: version
        run: |
          VERSION=$(python3 tools/update_versions.py --print-version rust)
          if [[ -z "$VERSION" ]]; then
            echo "Failed to read version from VERSION.toml" >&2
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine if release tag already exists
        id: tag_check
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          EXISTS=$(python3 tools/update_versions.py --check-tag-exists "$TAG")
          if [[ "$EXISTS" == "true" ]]; then
            echo "Tag $TAG already exists. Skipping publish." >&2
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG does not exist yet. We should publish." >&2
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Check core crate version matches VERSION.toml
        if: steps.tag_check.outputs.should_publish == 'true'
        run: |
          python3 tools/update_versions.py --assert-cargo-version "${{ steps.version.outputs.version }}"

  publish-rust:
    name: publish-rust-core
    needs: [prepare]
    if: needs.prepare.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository at triggering commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Dry-run package build (core)
        working-directory: core
        run: |
          cargo package --allow-dirty

      - name: Publish core crate to crates.io
        working-directory: core
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [[ -z "${CARGO_REGISTRY_TOKEN}" ]]; then
            echo "Missing secret CARGO_REGISTRY_TOKEN" >&2
            exit 1
          fi
          # --no-verify can be risky; we prefer a clean publish after the dry-run
          cargo publish --allow-dirty

  finalize:
    name: create-tag
    needs: [prepare, publish-rust]
    if: needs.prepare.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository at triggering commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Create and push git tag
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          TAG="v${VERSION}"
          git fetch --tags --quiet
          if git tag -l "$TAG" | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists. Nothing to do."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

  # --- Future expansion examples ---
  # publish-python:
  #   name: publish-python
  #   needs: [prepare]
  #   if: needs.prepare.outputs.should_publish == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.workflow_run.head_sha }}
  #         fetch-depth: 0
  #     # build wheel/sdist, publish to PyPI using TWINE_USERNAME/TWINE_PASSWORD
  #
  # publish-cpp:
  #   name: publish-cpp
  #   needs: [prepare]
  #   if: needs.prepare.outputs.should_publish == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.event.workflow_run.head_sha }}
  #         fetch-depth: 0
  #     # upload headers/artifacts to a package registry if desired

