load("@rules_cc//cc:defs.bzl", "cc_library", "cc_binary")
load("@rules_rust//rust:defs.bzl", "rust_shared_library", "rust_static_library")

package(default_visibility = ["//visibility:public"])

# =============================================================================
# C/C++ Interface
# =============================================================================

# C/C++ headers
cc_library(
    name = "dv_headers",
    hdrs = [
        "include/dv_c.h",
        "include/dv.hpp",
    ],
    includes = ["include"],
)

# Linkable library for C/C++ that exposes the Rust C ABI.
cc_library(
    name = "dv_c",
    hdrs = ["include/dv_c.h"],
    deps = ["//cpp:dv_capi_static"],
    includes = ["include"],
)

cc_library(
    name = "dv_cpp",
    hdrs = ["include/dv.hpp"],
    deps = [":dv_c"],
    includes = ["include"],
)

# =============================================================================
# C-compatible Rust Library
# =============================================================================

# C ABI shared library for C/C++ consumers
rust_shared_library(
    name = "dv_capi_shared",
    srcs = ["capi/src/lib.rs"],
    crate_name = "dv_capi",
    edition = "2021",
    deps = ["//core:dv_rs"],
)

# Static variant for C/C++ to link without runtime dylib.
rust_static_library(
    name = "dv_capi_static",
    srcs = ["capi/src/lib.rs"],
    crate_name = "dv_capi",
    edition = "2021",
    deps = ["//core:dv_rs"],
)

# =============================================================================
# Examples
# =============================================================================

cc_binary(
    name = "demo_cpp",
    srcs = ["examples/demo_cpp.cpp"],
    deps = [":dv_cpp"],
)

cc_binary(
    name = "demo_c",
    srcs = ["examples/demo_c.c"],
    deps = [":dv_c"],
)
